{
  "version": 3,
  "sources": ["<stdin>", "../node_modules/@remix-run/dev/compiler/shims/react.ts", "../app/entry.server.tsx", "../app/styles/stitches.config.ts", "D:\\Users\\Andler\\Development\\git_local\\remix\\powerstack-remix\\app\\root.tsx", "../app/app-config.ts", "../app/auth.server.ts", "../app/store/index.ts", "../app/library/utils.ts", "../app/store/ui-state.ts", "../app/store/session-state/default-session-state.ts", "../app/store/session-state/index.ts", "../app/styles/client.context.ts", "D:\\Users\\Andler\\Development\\git_local\\remix\\powerstack-remix\\app\\routes\\actions\\login\\$strategy.tsx", "D:\\Users\\Andler\\Development\\git_local\\remix\\powerstack-remix\\app\\routes\\index.tsx", "../app/components/WalletLogin.tsx", "D:\\Users\\Andler\\Development\\git_local\\remix\\powerstack-remix\\app\\routes\\jokes.tsx", "D:\\Users\\Andler\\Development\\git_local\\remix\\powerstack-remix\\app\\routes\\jokes\\jokes-error.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["export * from \"@remix-run/dev/server-build\";", "// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as React from \"react\";\nexport { React };\n", "import type { EntryContext } from '@remix-run/node'\nimport { RemixServer } from '@remix-run/react'\nimport { renderToString } from 'react-dom/server'\n\nimport { getCssText } from './styles/stitches.config'\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext,\n) {\n  let markup = renderToString(\n    <RemixServer context={remixContext} url={request.url} />,\n  )\n\n  markup = markup.replace(\n    /<style id=\"stitches\">.*<\\/style>/g,\n    `<style id=\"stitches\">${getCssText()}</style>`,\n  )\n\n  responseHeaders.set('Content-Type', 'text/html')\n\n  return new Response('<!DOCTYPE html>' + markup, {\n    status: responseStatusCode,\n    headers: responseHeaders,\n  })\n}\n", "import { createStitches } from '@stitches/react'\nimport lightTheme from './light-theme.json'\nimport darkTheme from './dark-theme.json'\n\nconsole.log('Light Theme for Stitches\\n', lightTheme)\nconsole.log('Dark Theme for Stitches\\n', darkTheme)\n\nconst stitches = createStitches({\n  theme: {\n    // colors,\n    colors: {\n      red: '#ff6d6d',\n      steel: '#363645b0',\n      black: '#000',\n      white: '#fff',\n      grey: '#666',\n    },\n    space: {\n      'space-1': '20px'\n    }\n  },\n  media: {\n    tabletUp: '(min-width: 768px)',\n    desktopUp: '(min-width: 1024px)',\n    largeDesktopUp: '(min-width: 1680px)',\n  },\n})\n\nconst { styled, globalCss, getCssText } = stitches\n\nexport { styled, getCssText, globalCss }\n", "import type { LoaderFunction, MetaFunction } from '@remix-run/node'\nimport { json } from '@remix-run/node'\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n  useCatch,\n  useLoaderData,\n} from '@remix-run/react'\nimport { useContext, useEffect } from 'react'\nimport { appconfig } from './app-config'\nimport { auth, session_storage } from './auth.server'\nimport { useStore } from './store'\n\nimport ClientStyleContext from './styles/client.context'\nimport { styled } from './styles/stitches.config'\nimport type { AppSessionData } from './types'\n\nconst Container = styled('div', {\n  backgroundColor: '#ff0000',\n  padding: '1em',\n})\n\nexport const meta: MetaFunction = () => ({\n  charset: 'utf-8',\n  title: 'Remix with Stitches',\n  viewport: 'width=device-width,initial-scale=1',\n})\n\ninterface DocumentProps {\n  children: React.ReactNode\n  title?: string\n}\n\nconst Document = ({ children, title }: DocumentProps) => {\n  const clientStyleData = useContext(ClientStyleContext)\n\n  // Only executed on client\n  useEffect(() => {\n    // reset cache to re-apply global styles\n    clientStyleData.reset()\n  }, [clientStyleData])\n\n  return (\n    <html lang=\"en\">\n      <head>\n        {title ? <title>{title}</title> : null}\n        <Meta />\n        <Links />\n        <style\n          id=\"stitches\"\n          dangerouslySetInnerHTML={{ __html: clientStyleData.sheet }}\n          suppressHydrationWarning\n        />\n      </head>\n      <body>\n        {children}\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  )\n}\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  const user = await auth.isAuthenticated(request)\n  const session = await session_storage.getSession(\n    request.headers.get('cookie'),\n  )\n  const session_error = session.get(auth.sessionErrorKey) || null\n\n  const session_data: AppSessionData = {\n    user,\n    appconfig,\n    session_error,\n  }\n  return json(session_data)\n}\n\nexport default function App() {\n  const session_data: AppSessionData = useLoaderData()\n\n  useEffect(() => {\n    useStore.getState().setSessionData(session_data)\n  }, [session_data])\n  return (\n    <Document>\n      <Outlet />\n    </Document>\n  )\n}\n\nexport function CatchBoundary() {\n  const caught = useCatch()\n\n  return (\n    <Document title={`${caught.status} ${caught.statusText}`}>\n      <Container>\n        <p>\n          [CatchBoundary]: {caught.status} {caught.statusText}\n        </p>\n      </Container>\n    </Document>\n  )\n}\n\nexport function ErrorBoundary({ error }: { error: Error }) {\n  return (\n    <Document title=\"Error!\">\n      <Container>\n        <p>[ErrorBoundary]: There was an error: {error.message}</p>\n      </Container>\n    </Document>\n  )\n}\n", "import * as env from 'env-var'\n\n// PUBLIC CONFIGURATION\n// Be careful to not put secrets here\n\n// placeholder for feature flags\ntype FeatureFlags = {}\n\n// smart contract addresses\ntype Contracts = {}\n\n// apis and other services\ntype Services = {}\n\ntype Analytics = {\n  google: string\n  sentry: string\n}\n\n// ethereum network config\ntype Network = {\n  chain: string\n  chain_id: string\n}\n\ntype Cloudinary = {\n  cloud_name: string\n  api_key: string\n  api_secret: string\n}\n\n// global application configuration based on env\nexport type AppConfig = {\n  network: Network\n  contracts: Contracts\n  services: Services\n  features: FeatureFlags\n  analytics: Analytics\n  cloudinary?: Cloudinary\n}\n\nexport const appconfig: AppConfig = {\n  network: {\n    chain: env.get('CHAIN').required().asString(),\n    chain_id: env.get('CHAIN_ID').required().asString(),\n  },\n  contracts: {},\n  services: {\n    graphql_api: env.get('GRAPHQL_API').required().asString(),\n  },\n  analytics: {\n    google: env.get('GOOGLE_ANALYTICS').asString() || '',\n    sentry: env.get('SENTRY_DSN').asString() || '',\n  },\n  cloudinary: {\n    cloudName: env.get('CLOUDINARY_CLOUD_NAME').required().asString(),\n    apiKey: env.get('CLOUDINARY_API_KEY').required().asString(),\n    apiSecret: env.get('CLOUDINARY_API_SECRET').required().asString(),\n  },\n  features: {},\n}\n", "import { createCookieSessionStorage } from '@remix-run/node'\nimport { ethers } from 'ethers'\nimport { Authenticator, AuthorizationError } from 'remix-auth'\nimport { FormStrategy } from 'remix-auth-form'\nimport type { AppUser } from './types'\nimport nacl from 'tweetnacl'\n\nexport const session_storage = createCookieSessionStorage({\n  cookie: {\n    name: '__session',\n    httpOnly: true,\n    path: '/',\n    sameSite: 'lax',\n    secrets: ['s3cret'], // This should be an env variable\n    secure: process.env.NODE_ENV === 'production',\n  },\n})\n\nexport const auth = new Authenticator<AppUser>(session_storage)\n\nconst enc = new TextEncoder().encode\n\nexport type WalletType = 'metamask' | 'wallet_connect'\n\nconst getFormData = (form: FormData) => {\n  const address = form.get('address')?.toString()\n  const signature = form.get('signature')?.toString()\n  const message = form.get('message')?.toString()\n\n  if (!address || !signature || !message)\n    throw new AuthorizationError(`Invalid login request`)\n\n  return {\n    address,\n    signature,\n    message,\n  }\n}\n\nauth.use(\n  new FormStrategy(async ({ form }) => {\n    const { address, signature, message } = getFormData(form)\n    const addr = await ethers.utils.verifyMessage(message, signature)\n    if (addr !== address) throw new AuthorizationError(`Invalid signature`)\n\n    const user: AppUser = {\n      address: address.toString(),\n      network: 'rinkeby', // TODO: change to dynamically set by the user\n    }\n\n    return user\n  }),\n  // each strategy has a name and can be changed to use another one\n  'metamask',\n)\n\nauth.use(\n  new FormStrategy(async ({ form }) => {\n    const { address, signature, message } = getFormData(form)\n\n    const resp = nacl.sign.detached.verify(\n      enc(message),\n      enc(signature),\n      enc(address),\n    )\n    console.log('auth response', resp)\n    // throw new AuthorizationError(`Invalid signature`)\n\n    const user: AppUser = {\n      address: address.toString(),\n      network: 'solana', // TODO: change to dynamically set by the user\n    }\n\n    return user\n  }),\n  // each strategy has a name and can be changed to use another one\n  'phantom',\n)\n", "import createVanillaStore from 'zustand/vanilla'\nimport type { SetState, GetState } from 'zustand'\nimport create from 'zustand'\nimport { createSelectorHooks } from 'auto-zustand-selectors-hook'\nimport { mountStoreDevtool } from 'simple-zustand-devtools'\nimport { isBrowser } from '~/library'\nimport type { UserInterfaceActions, UserInterfaceState } from './ui-state'\nimport { createUserInterfaceSlice } from './ui-state'\nimport type { AppSessionActions, AppSessionState } from './session-state'\nimport { createAppSessionSlice } from './session-state'\n\n// typescript slicing: https://bit.ly/3qgvLbn\nexport type AppState = AppSessionState & UserInterfaceState\nexport type AppStateActions = AppSessionActions & UserInterfaceActions\nexport type AppStore = AppState & AppStateActions\n\nexport type StoreSlice<T> = (\n  set: SetState<AppStore>,\n  get: GetState<AppStore>,\n) => T\n\n//github.com/pmndrs/zustand#using-zustand-without-react\nexport const store = createVanillaStore<AppStore>(\n  // compose all slices into AppState\n  (set, get) => ({\n    ...createAppSessionSlice(set, get),\n    ...createUserInterfaceSlice(set, get),\n  }),\n)\n\n// standard zustand store https://github.com/pmndrs/zustand\nconst useStoreBase = create(store)\n\n// devtools https://github.com/beerose/simple-zustand-devtools\nif (isBrowser) mountStoreDevtool('AppStore', useStoreBase as any)\n\n// typescrpt selector hooks: https://bit.ly/3fbBHfo\nexport const useStore = createSelectorHooks(useStoreBase)\n", "// This file is exclusively for Utilty functions\n// These fucntions must be pure functions and perform simple tasks\n\nimport _ from 'lodash'\n\nexport const noop = () => {}\nexport const isBrowser = typeof window !== 'undefined'\nexport const isNode = !isBrowser\nexport const userAgent = isBrowser ? _.get(window, 'navigator.userAgent') : ''\nexport const ethereum = isBrowser && _.get(window, 'ethereum')\nexport const isAndroid = /(Android)/i.test(userAgent)\nexport const isIphone = /(iPhone|iPod)/i.test(userAgent)\nexport const isIpad = /(iPad)/i.test(userAgent)\nexport const isMobile = isIphone || isAndroid\n// A mobile browser with ethereum we assume it's Metamask Browser\nexport const isMetamask = isMobile && ethereum\nexport const isPhantom = isBrowser && _.has(window, 'solana.isPhantom')\nexport const solana = isBrowser && _.get(window, 'solana')\n\nexport const formatAddress = (key: string) =>\n  `${key.slice(0, 4)}...${key.slice(-4)}`\n\nexport const base64Encode = (obj: {}) =>\n  Buffer.from(JSON.stringify(obj)).toString('base64')\n\nexport const base64Decode = (str: string) =>\n  JSON.parse(Buffer.from(str, 'base64').toString())\n\nexport function getBase64(file: File): Promise<any> {\n  return new Promise((resolve, rejects) => {\n    var reader = new FileReader()\n    reader.readAsDataURL(file)\n    reader.onload = function () {\n      resolve(reader?.result)\n    }\n    reader.onerror = function (error) {\n      rejects(error)\n    }\n  })\n}\n\nexport const copyToClipboard = (text: string) => {\n  const textField = document.createElement('textarea')\n  textField.innerText = text\n  document.body.appendChild(textField)\n  textField.select()\n  document.execCommand('copy')\n  textField.remove()\n}\n", "import type { StoreSlice } from '.'\n\nexport type UserInterfaceState = {\n  show_wallet: boolean\n  show_sidebar: boolean\n}\n\nexport type UserInterfaceActions = {\n  setShowWallet: (value: boolean) => void\n  setShowSidebar: (value: boolean) => void\n}\n\nexport type UserInterface = UserInterfaceState & UserInterfaceActions\n\nconst defaultUserInterfaceState = {\n  show_wallet: false,\n  show_sidebar: false,\n}\n\nexport const createUserInterfaceSlice: StoreSlice<UserInterface> = (set) => ({\n  ...defaultUserInterfaceState,\n\n  setShowWallet: (value) => set({ show_wallet: value }),\n\n  setShowSidebar: (value) => set({ show_sidebar: value }),\n})\n", "import type { AppConfig } from '~/app-config'\nimport type { SessionState } from '.'\n\n// dummy for solve typescript undefined appconfig, we know it'll always be defined but we need to make ts happy\nexport const dummy_appconfig: AppConfig = {\n  network: {\n    chain: '',\n    chain_id: '',\n  },\n  contracts: {},\n  services: {\n    graphql_api: '',\n  },\n  analytics: {\n    google: '',\n    sentry: '',\n  },\n  cloudinary: {\n    cloud_name: '',\n    api_key: '',\n    api_secret: '',\n  },\n  features: {},\n}\n\nexport const defaultAppSessionState: SessionState = {\n  appconfig: dummy_appconfig, // this gets replaced on root.tsx loader.\n  user: null,\n  session_error: null,\n}\n", "import type { StoreSlice } from '..'\nimport type { AppConfig } from '~/app-config'\nimport { defaultAppSessionState } from './default-session-state'\nimport type { AppSessionData, AppUser } from '~/types'\n\nexport type AppSessionState = {\n  appconfig: AppConfig\n  user: AppUser | null\n  session_error: string | null\n}\n\nexport type AppSessionActions = {\n  setUser: (user: AppUser) => void\n  setSessionData: (session_data: AppSessionData) => void\n}\n\nexport type AppSession = AppSessionState & AppSessionActions\n\nexport const createAppSessionSlice: StoreSlice<AppSession> = (set) => ({\n  ...defaultAppSessionState,\n\n  setUser: (user: AppUser) => set({ user }),\n\n  setSessionData: (session_data: AppSessionData) => set(session_data),\n})\n", "import { createContext } from 'react'\n\nexport interface ClientStyleContextData {\n  reset: () => void\n  sheet: string\n}\n\nconst ClientStyleContext = createContext<ClientStyleContextData>({\n  reset: () => {},\n  sheet: '',\n})\n\nexport default ClientStyleContext\n", "import type { ActionFunction } from '@remix-run/node'\nimport { auth } from '~/auth.server'\n\nexport const action: ActionFunction = async ({ request, params }) => {\n  const url = new URL(request.url)\n  const redirect_to = url.searchParams.get('redirect_to')\n\n  return auth.authenticate(params.strategy!, request, {\n    successRedirect: redirect_to!,\n    failureRedirect: redirect_to!,\n  })\n}\n", "import { Link } from '@remix-run/react'\nimport { WalletLogin } from '~/components/WalletLogin'\nimport { useStore } from '~/store'\nimport { styled } from '~/styles/stitches.config'\n\nconst Container = styled('div', {\n  fontFamily: 'system-ui, sans-serif',\n  lineHeight: 1.4,\n  margin: 'auto',\n  padding: '$space-1',\n  '@media (min-width: 1000px)': {\n    width: '600px',\n  },\n  variants: {\n    color: {\n      red: {\n        backgroundColor: '$red',\n      },\n      steel: {\n        backgroundColor: '$steel',\n        color: 'white'\n      }\n    }\n  },\n  defaultVariants: {\n    color: 'steel'\n  }\n})\n\nexport default function Index() {\n  const { user, appconfig } = useStore()\n  console.log('Index user value', user)\n  console.log('Index appconfig value', appconfig)\n  return (\n    <Container>\n      <h1>Welcome {user ? 'Back' : null} to PoweStack Remix</h1>\n      <WalletLogin />\n      <ul>\n        <li>\n          <Link to=\"/jokes\">Jokes</Link>\n        </li>\n        <li>\n          <Link to=\"/jokes-error\">Jokes: Error</Link>\n        </li>\n      </ul>\n    </Container>\n  )\n}\n", "import { styled } from '@stitches/react'\nimport { useStore } from '~/store'\nimport _ from 'lodash'\nimport { ethers } from 'ethers'\nimport { useFetcher, useLocation } from '@remix-run/react'\nimport { ethereum, isPhantom, solana } from '~/library'\n\nconst StyledWallet = styled('div', {\n  border: '1px dotted gray',\n  minHeight: 100,\n})\n\nconst message = 'Login to PowerStack Remix'\n\ntype LoginOptions = {\n  strategy: 'metamask' | 'phantom'\n  signed_message: {\n    signature: string\n    address: string\n    message: string\n  }\n}\n\nconst useLoginSubmit = () => {\n  const location = useLocation()\n  const fetcher = useFetcher()\n  const submit = ({ strategy, signed_message }: LoginOptions) => {\n    fetcher.submit(signed_message, {\n      method: 'post',\n      action: `/actions/login/${strategy}?redirect_to=${\n        location.pathname || '/'\n      }`,\n    })\n  }\n  return submit\n}\n\nexport const WalletLogin = () => {\n  const { user } = useStore()\n  const submit = useLoginSubmit()\n\n  const loginWithMetamask = async () => {\n    if (!ethereum) return alert('Metamask not found')\n    const provider = new ethers.providers.Web3Provider(ethereum)\n    const signer = provider.getSigner()\n    submit({\n      strategy: 'metamask',\n      signed_message: {\n        signature: await signer.signMessage(message),\n        address: await signer.getAddress(),\n        message,\n      },\n    })\n  }\n\n  const loginWithPhantom = async () => {\n    if (!isPhantom) return alert('Phantom not found')\n    try {\n      const resp = await solana.connect({ onlyIfTrusted: true })\n      console.log(resp.publicKey.toString(), solana.isConnected) // 26qv4GCcx98RihuK3c4T6ozB3J7L6VwCuFVc7Ta2A3Uo\n    } catch (err) {\n      alert((err as Error).message)\n    }\n\n    submit({\n      strategy: 'phantom',\n      signed_message: {\n        signature: await solana.signMessage(\n          new TextEncoder().encode(message),\n          'utf8',\n        ),\n        address: resp.publicKey.toString(),\n        message,\n      },\n    })\n  }\n\n  return (\n    <StyledWallet>\n      {/* {console.log('Wat chain', appconfig.network.chain)}\n      <p>Network: {appconfig.network.chain}</p> */}\n      <h3>Rinkeby</h3>\n      <button onClick={loginWithMetamask}>Login with Metamask</button>\n      <p>\n        Address:{' '}\n        {user?.address && user?.network === 'rinkeby'\n          ? user.address\n          : 'wallet not connected'}\n      </p>\n      {}\n      <h3>Solana</h3>\n      <button onClick={loginWithPhantom}>Login with Phantom</button>\n      <p>\n        Address:{' '}\n        {user?.address && user?.network === 'solana'\n          ? user.address\n          : 'wallet not connected'}\n      </p>\n    </StyledWallet>\n  )\n}\n", "import { Link } from '@remix-run/react'\n\nimport { styled } from '../styles/stitches.config'\n\nconst Container = styled('div', {\n  backgroundColor: '#d6d6d6',\n})\n\nexport default function Jokes() {\n  return (\n    <Container>\n      <h1>Jokes</h1>\n      <p>This route works fine.</p>\n      <Link to=\"/\">Back to home</Link>\n    </Container>\n  )\n}\n", "export default function JokesError() {\n  throw new Error('This route is no joking with us.')\n}\n", "export default {'version':'84c8e2c5','entry':{'module':'/build/entry.client-4PQNENKJ.js','imports':['/build/_shared/chunk-4ACWVKRS.js','/build/_shared/chunk-VJK2PPKE.js','/build/_shared/chunk-QLFXOJ5S.js','/build/_shared/chunk-6SKE6JXS.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-6DI4TP4B.js','imports':['/build/_shared/chunk-FHZ2PEHM.js'],'hasAction':false,'hasLoader':true,'hasCatchBoundary':true,'hasErrorBoundary':true},'routes/actions/login/$strategy':{'id':'routes/actions/login/$strategy','parentId':'root','path':'actions/login/:strategy','index':undefined,'caseSensitive':undefined,'module':'/build/routes/actions/login/$strategy-MOLQ2Q3Z.js','imports':undefined,'hasAction':true,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/index':{'id':'routes/index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/index-EYAYF6XX.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/jokes':{'id':'routes/jokes','parentId':'root','path':'jokes','index':undefined,'caseSensitive':undefined,'module':'/build/routes/jokes-Z7UYQFSA.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false},'routes/jokes/jokes-error':{'id':'routes/jokes/jokes-error','parentId':'routes/jokes','path':'jokes-error','index':undefined,'caseSensitive':undefined,'module':'/build/routes/jokes/jokes-error-WN55ZSKU.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasCatchBoundary':false,'hasErrorBoundary':false}},'url':'/build/manifest-84C8E2C5.js'};", "\nimport * as entryServer from \"D:\\\\Users\\\\Andler\\\\Development\\\\git_local\\\\remix\\\\powerstack-remix\\\\app\\\\entry.server.tsx\";\nimport * as route0 from \"D:\\\\Users\\\\Andler\\\\Development\\\\git_local\\\\remix\\\\powerstack-remix\\\\app\\\\root.tsx\";\nimport * as route1 from \"D:\\\\Users\\\\Andler\\\\Development\\\\git_local\\\\remix\\\\powerstack-remix\\\\app\\\\routes\\\\actions\\\\login\\\\$strategy.tsx\";\nimport * as route2 from \"D:\\\\Users\\\\Andler\\\\Development\\\\git_local\\\\remix\\\\powerstack-remix\\\\app\\\\routes\\\\index.tsx\";\nimport * as route3 from \"D:\\\\Users\\\\Andler\\\\Development\\\\git_local\\\\remix\\\\powerstack-remix\\\\app\\\\routes\\\\jokes.tsx\";\nimport * as route4 from \"D:\\\\Users\\\\Andler\\\\Development\\\\git_local\\\\remix\\\\powerstack-remix\\\\app\\\\routes\\\\jokes\\\\jokes-error.tsx\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/actions/login/$strategy\": {\n      id: \"routes/actions/login/$strategy\",\n      parentId: \"root\",\n      path: \"actions/login/:strategy\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/index\": {\n      id: \"routes/index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/jokes\": {\n      id: \"routes/jokes\",\n      parentId: \"root\",\n      path: \"jokes\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/jokes/jokes-error\": {\n      id: \"routes/jokes/jokes-error\",\n      parentId: \"routes/jokes\",\n      path: \"jokes-error\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route4\n    }\n  };"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACCA,YAAuB;;;ACDvB;AAAA;AAAA;AAAA;AACA,oBAA4B;AAC5B,oBAA+B;;;ACF/B,mBAA+B;;;;;;;;;;;;;;;;;;;;;;;;;;;AAI/B,QAAQ,IAAI,8BAA8B;AAC1C,QAAQ,IAAI,6BAA6B;AAEzC,IAAM,WAAW,iCAAe;AAAA,EAC9B,OAAO;AAAA,IAEL,QAAQ;AAAA,MACN,KAAK;AAAA,MACL,OAAO;AAAA,MACP,OAAO;AAAA,MACP,OAAO;AAAA,MACP,MAAM;AAAA;AAAA,IAER,OAAO;AAAA,MACL,WAAW;AAAA;AAAA;AAAA,EAGf,OAAO;AAAA,IACL,UAAU;AAAA,IACV,WAAW;AAAA,IACX,gBAAgB;AAAA;AAAA;AAIpB,IAAM,EAAE,QAAQ,WAAW,eAAe;;;ADtB3B,uBACb,SACA,oBACA,iBACA,cACA;AACA,MAAI,SAAS,kCACX,oCAAC,2BAAD;AAAA,IAAa,SAAS;AAAA,IAAc,KAAK,QAAQ;AAAA;AAGnD,WAAS,OAAO,QACd,qCACA,wBAAwB;AAG1B,kBAAgB,IAAI,gBAAgB;AAEpC,SAAO,IAAI,SAAS,oBAAoB,QAAQ;AAAA,IAC9C,QAAQ;AAAA,IACR,SAAS;AAAA;AAAA;;;AEzBb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,mBAAqB;AACrB,oBASO;AACP,oBAAsC;;;ACZtC,UAAqB;AAyCd,IAAM,YAAuB;AAAA,EAClC,SAAS;AAAA,IACP,OAAO,AAAI,QAAI,SAAS,WAAW;AAAA,IACnC,UAAU,AAAI,QAAI,YAAY,WAAW;AAAA;AAAA,EAE3C,WAAW;AAAA,EACX,UAAU;AAAA,IACR,aAAa,AAAI,QAAI,eAAe,WAAW;AAAA;AAAA,EAEjD,WAAW;AAAA,IACT,QAAQ,AAAI,QAAI,oBAAoB,cAAc;AAAA,IAClD,QAAQ,AAAI,QAAI,cAAc,cAAc;AAAA;AAAA,EAE9C,YAAY;AAAA,IACV,WAAW,AAAI,QAAI,yBAAyB,WAAW;AAAA,IACvD,QAAQ,AAAI,QAAI,sBAAsB,WAAW;AAAA,IACjD,WAAW,AAAI,QAAI,yBAAyB,WAAW;AAAA;AAAA,EAEzD,UAAU;AAAA;;;AC3DZ,kBAA2C;AAC3C,oBAAuB;AACvB,wBAAkD;AAClD,6BAA6B;AAE7B,uBAAiB;AAEV,IAAM,kBAAkB,4CAA2B;AAAA,EACxD,QAAQ;AAAA,IACN,MAAM;AAAA,IACN,UAAU;AAAA,IACV,MAAM;AAAA,IACN,UAAU;AAAA,IACV,SAAS,CAAC;AAAA,IACV,QAAQ;AAAA;AAAA;AAIL,IAAM,OAAO,IAAI,gCAAuB;AAE/C,IAAM,MAAM,IAAI,cAAc;AAI9B,IAAM,cAAc,CAAC,SAAmB;AAxBxC;AAyBE,QAAM,UAAU,WAAK,IAAI,eAAT,mBAAqB;AACrC,QAAM,YAAY,WAAK,IAAI,iBAAT,mBAAuB;AACzC,QAAM,WAAU,WAAK,IAAI,eAAT,mBAAqB;AAErC,MAAI,CAAC,WAAW,CAAC,aAAa,CAAC;AAC7B,UAAM,IAAI,qCAAmB;AAE/B,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA;AAAA;AAIJ,KAAK,IACH,IAAI,oCAAa,OAAO,EAAE,WAAW;AACnC,QAAM,EAAE,SAAS,WAAW,sBAAY,YAAY;AACpD,QAAM,OAAO,MAAM,qBAAO,MAAM,cAAc,UAAS;AACvD,MAAI,SAAS;AAAS,UAAM,IAAI,qCAAmB;AAEnD,QAAM,OAAgB;AAAA,IACpB,SAAS,QAAQ;AAAA,IACjB,SAAS;AAAA;AAGX,SAAO;AAAA,IAGT;AAGF,KAAK,IACH,IAAI,oCAAa,OAAO,EAAE,WAAW;AACnC,QAAM,EAAE,SAAS,WAAW,sBAAY,YAAY;AAEpD,QAAM,QAAO,yBAAK,KAAK,SAAS,OAC9B,IAAI,WACJ,IAAI,YACJ,IAAI;AAEN,UAAQ,IAAI,iBAAiB;AAG7B,QAAM,OAAgB;AAAA,IACpB,SAAS,QAAQ;AAAA,IACjB,SAAS;AAAA;AAGX,SAAO;AAAA,IAGT;;;AC5EF,qBAA+B;AAE/B,qBAAmB;AACnB,yCAAoC;AACpC,qCAAkC;;;ACDlC,oBAAc;AAGP,IAAM,YAAY,OAAO,WAAW;AAEpC,IAAM,YAAY,YAAY,sBAAE,IAAI,QAAQ,yBAAyB;AACrE,IAAM,WAAW,aAAa,sBAAE,IAAI,QAAQ;AAC5C,IAAM,YAAY,aAAa,KAAK;AACpC,IAAM,WAAW,iBAAiB,KAAK;AACvC,IAAM,SAAS,UAAU,KAAK;AAI9B,IAAM,YAAY,aAAa,sBAAE,IAAI,QAAQ;AAC7C,IAAM,SAAS,aAAa,sBAAE,IAAI,QAAQ;;;ACHjD,IAAM,4BAA4B;AAAA,EAChC,aAAa;AAAA,EACb,cAAc;AAAA;AAGT,IAAM,2BAAsD,CAAC,QAAS,iCACxE,4BADwE;AAAA,EAG3E,eAAe,CAAC,UAAU,IAAI,EAAE,aAAa;AAAA,EAE7C,gBAAgB,CAAC,UAAU,IAAI,EAAE,cAAc;AAAA;;;ACpB1C,IAAM,kBAA6B;AAAA,EACxC,SAAS;AAAA,IACP,OAAO;AAAA,IACP,UAAU;AAAA;AAAA,EAEZ,WAAW;AAAA,EACX,UAAU;AAAA,IACR,aAAa;AAAA;AAAA,EAEf,WAAW;AAAA,IACT,QAAQ;AAAA,IACR,QAAQ;AAAA;AAAA,EAEV,YAAY;AAAA,IACV,YAAY;AAAA,IACZ,SAAS;AAAA,IACT,YAAY;AAAA;AAAA,EAEd,UAAU;AAAA;AAGL,IAAM,yBAAuC;AAAA,EAClD,WAAW;AAAA,EACX,MAAM;AAAA,EACN,eAAe;AAAA;;;ACVV,IAAM,wBAAgD,CAAC,QAAS,iCAClE,yBADkE;AAAA,EAGrE,SAAS,CAAC,SAAkB,IAAI,EAAE;AAAA,EAElC,gBAAgB,CAAC,iBAAiC,IAAI;AAAA;;;AJDjD,IAAM,QAAQ,4BAEnB,CAAC,KAAK,SAAS,kCACV,sBAAsB,KAAK,QAC3B,yBAAyB,KAAK;AAKrC,IAAM,eAAe,4BAAO;AAG5B,IAAI;AAAW,wDAAkB,YAAY;AAGtC,IAAM,WAAW,4DAAoB;;;AKrC5C,oBAA8B;AAO9B,IAAM,qBAAqB,iCAAsC;AAAA,EAC/D,OAAO,MAAM;AAAA;AAAA,EACb,OAAO;AAAA;AAGT,IAAO,yBAAQ;;;ARSf,IAAM,YAAY,OAAO,OAAO;AAAA,EAC9B,iBAAiB;AAAA,EACjB,SAAS;AAAA;AAGJ,IAAM,OAAqB,MAAO;AAAA,EACvC,SAAS;AAAA,EACT,OAAO;AAAA,EACP,UAAU;AAAA;AAQZ,IAAM,WAAW,CAAC,EAAE,UAAU,YAA2B;AACvD,QAAM,kBAAkB,8BAAW;AAGnC,+BAAU,MAAM;AAEd,oBAAgB;AAAA,KACf,CAAC;AAEJ,SACE,oCAAC,QAAD;AAAA,IAAM,MAAK;AAAA,KACT,oCAAC,QAAD,MACG,QAAQ,oCAAC,SAAD,MAAQ,SAAiB,MAClC,oCAAC,oBAAD,OACA,oCAAC,qBAAD,OACA,oCAAC,SAAD;AAAA,IACE,IAAG;AAAA,IACH,yBAAyB,EAAE,QAAQ,gBAAgB;AAAA,IACnD,0BAAwB;AAAA,OAG5B,oCAAC,QAAD,MACG,UACD,oCAAC,iCAAD,OACA,oCAAC,uBAAD,OACA,oCAAC,0BAAD;AAAA;AAMD,IAAM,SAAyB,OAAO,EAAE,cAAc;AAC3D,QAAM,OAAO,MAAM,KAAK,gBAAgB;AACxC,QAAM,UAAU,MAAM,gBAAgB,WACpC,QAAQ,QAAQ,IAAI;AAEtB,QAAM,gBAAgB,QAAQ,IAAI,KAAK,oBAAoB;AAE3D,QAAM,eAA+B;AAAA,IACnC;AAAA,IACA;AAAA,IACA;AAAA;AAEF,SAAO,uBAAK;AAAA;AAGC,eAAe;AAC5B,QAAM,eAA+B;AAErC,+BAAU,MAAM;AACd,aAAS,WAAW,eAAe;AAAA,KAClC,CAAC;AACJ,SACE,oCAAC,UAAD,MACE,oCAAC,sBAAD;AAAA;AAKC,yBAAyB;AAC9B,QAAM,SAAS;AAEf,SACE,oCAAC,UAAD;AAAA,IAAU,OAAO,GAAG,OAAO,UAAU,OAAO;AAAA,KAC1C,oCAAC,WAAD,MACE,oCAAC,KAAD,MAAG,qBACiB,OAAO,QAAO,KAAE,OAAO;AAAA;AAO5C,uBAAuB,EAAE,SAA2B;AACzD,SACE,oCAAC,UAAD;AAAA,IAAU,OAAM;AAAA,KACd,oCAAC,WAAD,MACE,oCAAC,KAAD,MAAG,yCAAsC,MAAM;AAAA;;;ASlHvD;AAAA;AAAA;AAAA;AAGO,IAAM,SAAyB,OAAO,EAAE,SAAS,aAAa;AACnE,QAAM,MAAM,IAAI,IAAI,QAAQ;AAC5B,QAAM,cAAc,IAAI,aAAa,IAAI;AAEzC,SAAO,KAAK,aAAa,OAAO,UAAW,SAAS;AAAA,IAClD,iBAAiB;AAAA,IACjB,iBAAiB;AAAA;AAAA;;;ACTrB;AAAA;AAAA;AAAA;AAAA,oBAAqB;;;ACArB,oBAAuB;AAGvB,qBAAuB;AACvB,oBAAwC;AAGxC,IAAM,eAAe,0BAAO,OAAO;AAAA,EACjC,QAAQ;AAAA,EACR,WAAW;AAAA;AAGb,IAAM,UAAU;AAWhB,IAAM,iBAAiB,MAAM;AAC3B,QAAM,WAAW;AACjB,QAAM,UAAU;AAChB,QAAM,SAAS,CAAC,EAAE,UAAU,qBAAmC;AAC7D,YAAQ,OAAO,gBAAgB;AAAA,MAC7B,QAAQ;AAAA,MACR,QAAQ,kBAAkB,wBACxB,SAAS,YAAY;AAAA;AAAA;AAI3B,SAAO;AAAA;AAGF,IAAM,cAAc,MAAM;AAC/B,QAAM,EAAE,SAAS;AACjB,QAAM,SAAS;AAEf,QAAM,oBAAoB,YAAY;AACpC,QAAI,CAAC;AAAU,aAAO,MAAM;AAC5B,UAAM,WAAW,IAAI,sBAAO,UAAU,aAAa;AACnD,UAAM,SAAS,SAAS;AACxB,WAAO;AAAA,MACL,UAAU;AAAA,MACV,gBAAgB;AAAA,QACd,WAAW,MAAM,OAAO,YAAY;AAAA,QACpC,SAAS,MAAM,OAAO;AAAA,QACtB;AAAA;AAAA;AAAA;AAKN,QAAM,mBAAmB,YAAY;AACnC,QAAI,CAAC;AAAW,aAAO,MAAM;AAC7B,QAAI;AACF,YAAM,QAAO,MAAM,OAAO,QAAQ,EAAE,eAAe;AACnD,cAAQ,IAAI,MAAK,UAAU,YAAY,OAAO;AAAA,aACvC,KAAP;AACA,YAAO,IAAc;AAAA;AAGvB,WAAO;AAAA,MACL,UAAU;AAAA,MACV,gBAAgB;AAAA,QACd,WAAW,MAAM,OAAO,YACtB,IAAI,cAAc,OAAO,UACzB;AAAA,QAEF,SAAS,KAAK,UAAU;AAAA,QACxB;AAAA;AAAA;AAAA;AAKN,SACE,oCAAC,cAAD,MAGE,oCAAC,MAAD,MAAI,YACJ,oCAAC,UAAD;AAAA,IAAQ,SAAS;AAAA,KAAmB,wBACpC,oCAAC,KAAD,MAAG,YACQ,KACR,8BAAM,YAAW,8BAAM,aAAY,YAChC,KAAK,UACL,yBAGN,oCAAC,MAAD,MAAI,WACJ,oCAAC,UAAD;AAAA,IAAQ,SAAS;AAAA,KAAkB,uBACnC,oCAAC,KAAD,MAAG,YACQ,KACR,8BAAM,YAAW,8BAAM,aAAY,WAChC,KAAK,UACL;AAAA;;;AD3FZ,IAAM,aAAY,OAAO,OAAO;AAAA,EAC9B,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,QAAQ;AAAA,EACR,SAAS;AAAA,EACT,8BAA8B;AAAA,IAC5B,OAAO;AAAA;AAAA,EAET,UAAU;AAAA,IACR,OAAO;AAAA,MACL,KAAK;AAAA,QACH,iBAAiB;AAAA;AAAA,MAEnB,OAAO;AAAA,QACL,iBAAiB;AAAA,QACjB,OAAO;AAAA;AAAA;AAAA;AAAA,EAIb,iBAAiB;AAAA,IACf,OAAO;AAAA;AAAA;AAII,iBAAiB;AAC9B,QAAM,EAAE,MAAM,0BAAc;AAC5B,UAAQ,IAAI,oBAAoB;AAChC,UAAQ,IAAI,yBAAyB;AACrC,SACE,oCAAC,YAAD,MACE,oCAAC,MAAD,MAAI,YAAS,OAAO,SAAS,MAAK,wBAClC,oCAAC,aAAD,OACA,oCAAC,MAAD,MACE,oCAAC,MAAD,MACE,oCAAC,oBAAD;AAAA,IAAM,IAAG;AAAA,KAAS,WAEpB,oCAAC,MAAD,MACE,oCAAC,oBAAD;AAAA,IAAM,IAAG;AAAA,KAAe;AAAA;;;AE1ClC;AAAA;AAAA;AAAA;AAAA,oBAAqB;AAIrB,IAAM,aAAY,OAAO,OAAO;AAAA,EAC9B,iBAAiB;AAAA;AAGJ,iBAAiB;AAC9B,SACE,oCAAC,YAAD,MACE,oCAAC,MAAD,MAAI,UACJ,oCAAC,KAAD,MAAG,2BACH,oCAAC,oBAAD;AAAA,IAAM,IAAG;AAAA,KAAI;AAAA;;;ACbnB;AAAA;AAAA;AAAA;AAAe,sBAAsB;AACnC,QAAM,IAAI,MAAM;AAAA;;;ACDlB,IAAO,0BAAQ,EAAC,WAAU,YAAW,SAAQ,EAAC,UAAS,mCAAkC,WAAU,CAAC,oCAAmC,oCAAmC,oCAAmC,uCAAqC,UAAS,EAAC,QAAO,EAAC,MAAK,QAAO,YAAW,QAAU,QAAO,IAAG,SAAQ,QAAU,iBAAgB,QAAU,UAAS,2BAA0B,WAAU,CAAC,qCAAoC,aAAY,OAAM,aAAY,MAAK,oBAAmB,MAAK,oBAAmB,QAAM,kCAAiC,EAAC,MAAK,kCAAiC,YAAW,QAAO,QAAO,2BAA0B,SAAQ,QAAU,iBAAgB,QAAU,UAAS,qDAAoD,WAAU,QAAU,aAAY,MAAK,aAAY,OAAM,oBAAmB,OAAM,oBAAmB,SAAO,gBAAe,EAAC,MAAK,gBAAe,YAAW,QAAO,QAAO,QAAU,SAAQ,MAAK,iBAAgB,QAAU,UAAS,mCAAkC,WAAU,QAAU,aAAY,OAAM,aAAY,OAAM,oBAAmB,OAAM,oBAAmB,SAAO,gBAAe,EAAC,MAAK,gBAAe,YAAW,QAAO,QAAO,SAAQ,SAAQ,QAAU,iBAAgB,QAAU,UAAS,mCAAkC,WAAU,QAAU,aAAY,OAAM,aAAY,OAAM,oBAAmB,OAAM,oBAAmB,SAAO,4BAA2B,EAAC,MAAK,4BAA2B,YAAW,gBAAe,QAAO,eAAc,SAAQ,QAAU,iBAAgB,QAAU,UAAS,+CAA8C,WAAU,QAAU,aAAY,OAAM,aAAY,OAAM,oBAAmB,OAAM,oBAAmB,WAAQ,OAAM;;;ACQjpD,IAAM,QAAQ,EAAE,QAAQ;AACxB,IAAM,SAAS;AAAA,EACpB,QAAQ;AAAA,IACN,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA;AAAA,EAEZ,kCAAkC;AAAA,IAC9B,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA;AAAA,EAEZ,gBAAgB;AAAA,IACZ,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA;AAAA,EAEZ,gBAAgB;AAAA,IACZ,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA;AAAA,EAEZ,4BAA4B;AAAA,IACxB,IAAI;AAAA,IACJ,UAAU;AAAA,IACV,MAAM;AAAA,IACN,OAAO;AAAA,IACP,eAAe;AAAA,IACf,QAAQ;AAAA;AAAA;",
  "names": []
}
